
uptrend="20210715-20211118"
downtrend="20211118-20220515"
mm2021="20210515-20220515"
mm2020="20200515-20210701"

t2019="20190101-20191231" #till 2019
t2020="20190101-20201231" #till 2020
t2021="20190101-20211231" #till 2021

all_time="20190101-"

__volume='./user_data'
__env=".env"

backtest()
{
	#the test name is  strategy+current timestamp 
	#it is ok to have more tests under the same name because one name represent some settings

	__parse_args $@;
	__reports_args=;

	[ -z "$__strategy" ] && echo "[backest] missing --strategy" && exit;
	[ -z "$__timeframe" ] && echo "[backest] missing --timeframe" && exit;
	[ -z "$__timerange" ] && echo "[backest] missing --timerange" && exit;
	[ -z "$__suffix" ] && echo "[backest] missing --suffix" && exit;

	local backport_dir="$__volume"/"backtest_tmp_results";
	if [ -n "$__official" ]; then 
		__reports_args="--official"; 
		local backport_dir="$__volume"/"backtest_results";
	fi

	#create backtest_name
	local __name="$__suffix""_""$__timerange_name""_""$__timeframe""_""$__version"
	local dir="$backport_dir"/"$__name"
	mkdir -p $dir

	#define command (we always enable position stacking)
	local freqtrade__cmd="freqtrade backtesting --config $__config --timerange $__timerange --strategy $__strategy --timeframe $__timeframe --timeframe-detail $__timeframe_detail --backtest-filename $dir/$__strategy.json $__extra_args --userdir $__volume";

	#run command and store report (just because we can)
	if [ "$__cmd_prefix" == "echo" ]
	then
		echo $freqtrade__cmd '>' "$dir/$__strategy.report"
	else
		$freqtrade__cmd > "$dir/$__strategy.report"
	fi

	#report $__reports_args
}

#official backtest
obacktest()
{ 
	#the change of version corresponds to the change of any possible settings (form pairs used to different loss in optimization or epochs)
	#version increase only if we have at least one strategy with better results 
	#version change is reported in readme

	local args=("${@}")  
	__parse_args $@;

	[ -z "$__version" ] && echo "[obackest] missing --version" && exit;
	[ -z "$__timeframe" ] && echo "[obackest] missing timeframe" && exit;
	[ -z "$__suffix" ] && echo "[obackest] missing --suffix" && exit;

	#list of tests name 
	local __tests=( "mm2021:$mm2021" "alltime:$all_time" )

	echo "[obacktest] [WARNING]: this is an official backtest, it will run with timeframe_details=5m over several timeranges"
	sleep 5

	echo "[obacktest] starting..."

	__official=true;
	for ob_test in "${__tests[@]}" ; do
		local testname="${ob_test%%:*}"  #key
		local timerange="${ob_test##*:}" #value
		__exec backtest --suffix $__suffix --$__timeframe --$testname --version $__version --strategy $__strategy $__extra_args
	done
}

opt()
{
	__parse_args $@;

	[ -z "$__epochs" ] && echo "missing --epochs" && exit;
	[ -z "$__loss" ] && echo "missing --hyperopt-loss" && exit;
	[ -z "$__timeframe" ] && echo "missing timeframe" && exit;
	[ -z "$__timerange" ] && echo "missing timerange" && exit;

	#check values
	[ -z "$__strategy" ] && echo "missing strategy" && exit;

	$epoch=$__epochs
	$loss=$__loss
	$strategy=$__strategy
	$timeframe=$__timeframe
	$timerange=$__timerange	

	local freqtrade__cmd="freqtrade hyperopt --config $__config --epochs $epochs --hyperopt-loss $loss --timerange $timerange --strategy $strategy --timeframe $timeframe --userdir $__volume  $__extra_args";

	for nv_file in user_data/strategies/*.py; do
		if [ -f "$nv_file" ]
		then
			local strategy=${nv_file%.py}
			local strategy=${strategy##*/}

			__strategy=$strategy
			echo "Optimizing $strategy"
			opt --strategy $__strategy --epochs $__epochs --hyperopt-loss $__loss --$timeframe --timerange $timerange $__extra_args
		fi
	done


	__save $__extra_args

	$__cmd_prefix $freqtrade__cmd	
}

new_version()
{
	#parse args
	__parse_args $@;
	
	[ -z "$__version" ] && echo "missing --version" && exit;
	[ -z "$__epochs" ] && echo "missing --epochs" && exit;
	[ -z "$__loss" ] && echo "missing --hyperopt-loss" && exit;

	local __tests=( "t2019":$t2019 "t2020":$t2020 "t2021":$t2021 "tnow":$all_time )
	local __timeframes=( "4h" "12h" )

	#1) opt for all strategies and timeframe 4h 
	#2) run obacktest (official backtest) for 3 timeframes ( 4h, 12h) and some timeranges (t2019, t2020, t2021, all_time) 
	#3) copy strategy.json into opt folder and rename it 

	for nv_test in "${__tests[@]}" ; do
		for nv_timeframe in "${__timeframes[@]}" ; do

			local testname="${nv_test%%:*}"  #key
			local timerange="${nv_test##*:}" #value
			local timeframe=$nv_timeframe

			#optimize 1 test per strategy
			for nv_file in user_data/strategies/*.py; do
				if [ -f "$nv_file" ]
				then
					local strategy=${nv_file%.py}
					local strategy=${strategy##*/}

					__strategy=$strategy
					echo "Optimizing $strategy"
					opt --strategy $__strategy --epochs $__epochs --hyperopt-loss $__loss --$timeframe --timerange $timerange $__extra_args
				fi
			done

			#run official backtest for all timeframes and timeranges
			local suffix=$testname
			obacktest --suffix $suffix --$timeframe --timerange $__timerange $__extra_args
		done
	done

}

report()
{
	$__cmd_prefix python "pyscripts/csv_report.py" $@
}

bulkdownload()
{
	__activate_python_env
	__timerange=$all_time
	echo "Start downloading ..."
	$__cmd_prefix freqtrade download-data --exchange "binance"  --pairs-file $__volume/data/binance/pairs.json  --timerange $__timerange -t 5m ${__extra_args[@]} ;
	$__cmd_prefix freqtrade download-data --exchange "binance"  --pairs-file $__volume/data/binance/pairs.json  --timerange $__timerange -t 1h ${__extra_args[@]} ;
	$__cmd_prefix freqtrade download-data --exchange "binance"  --pairs-file $__volume/data/binance/pairs.json  --timerange $__timerange -t 4h ${__extra_args[@]} ;
	$__cmd_prefix freqtrade download-data --exchange "binance"  --pairs-file $__volume/data/binance/pairs.json  --timerange $__timerange -t 12h ${__extra_args[@]} ;
}


help(){
    echo
    echo -e "\033[1;4;32m""Functions:""\033[0;34m"
    compgen -A function
    echo
    echo -e "\033[1;4;32m""Aliases:""\033[0;34m"
    compgen -A alias
    echo
    echo -e "\033[0m"
}

setup()
{
	rm -rf $__env
	$__cmd_prefix python -m venv $__env

	__activate_python_env

	$__cmd_prefix python -m pip install --upgrade pip

	#installing ta-lib
	sudo $__cmd_prefix ./build_helpers/install_ta-lib.sh

	#installing freqtrade
	$__cmd_prefix git clone https://github.com/freqtrade/freqtrade.git
	$__cmd_prefix cd freqtrade
	$__cmd_prefix git checkout stable 

	$__cmd_prefix pip install -r requirements.txt
	$__cmd_prefix pip install -r requirements-hyperopt.txt
	$__cmd_prefix pip install -r requirements-plot.txt
	$__cmd_prefix python -m pip install -e .
	$__cmd_prefix cd - 
	$__cmd prefix pip install -r ./requirements.txt
}

update()
{
	$__cmd_prefix cd freqtrade
	$__cmd_prefix git checkout stable 
	$__cmd_prefix git pull
	$__cmd_prefix cd - 
}

version()
{
	__activate_python_env
	$__cmd_prefix freqtrade --version
}

#############################  PRIVATE #########################################

__activate_python_env()
{
	#activate virtual environment
	echo "Activating python environment"
	$__cmd_prefix source $__env/bin/activate
	echo "Activated python environment"
}

__set()
{
	#first argument it s one command , followings are arguments
	if [ -z "$__cmd" ]; then 
		__cmd=$1;
	else
		__args="$__args $1";
	fi
}

__parse_cmd()
{
	__cmd=;
	__args=();
	while [[ $# -gt 0 ]]; do
		case $1 in			
			*)
				__set $1;
				shift
			;;
		esac;
	done;

}

__compute_opt_file_path()
{
	strategy=$1
	__opt_file_path=$__volume/versions/"$strategy""_""$__suffix""_""$__timeframe""_""$__version.json"
}

__exec()
{
	__parse_cmd $@

	#list of commands that need to be executed right away
	[ $__cmd == "help" ] && help && return;
	[ $__cmd == "setup" ] && setup && return;
	[ $__cmd == "update" ] && update && return;
	[ $__cmd == "version" ] && version && return;
	[ $__cmd == "bulkdownload" ] && bulkdownload && return;
	[ $__cmd == "report" ] && report $__extra_args && return;

	__activate_python_env

	echo "[exec] called cmd: $__cmd args: $__args"
	#this will also parse the args
	local args=("$__args")  
		
	echo "[debug] current suffix $__suffix"
	__parse_args $__args
	echo "[debug] post current suffix $__suffix"

	#if not strategy is defined we enable all strategy
	#we define __allstrategy for functions that define one strategy but still want to test all of them (like new_version)
	[ -z "$__strategy" ] && __allstrategy=true;

	#run command over every strategy

	if [ "$__allstrategy" == "true" ]
	then
		for exec_file in user_data/strategies/*.py; do
			if [ -f "$exec_file" ]
			then
				local strategy=${exec_file%.py}
				local strategy=${strategy##*/}
				__compute_opt_file_path $strategy
				#check if file exists
				if [ -f "$__opt_file_path" ]
				then
					echo "[exec] loaded optimized file $__opt_file_path"
					cp "$__opt_file_path" "$__volume/strategies/$strategy.json"
				fi
				echo "[exec] $__cmd --strategy $strategy $args"
				$__cmd --strategy $strategy $args

			fi
		done
	else
		__compute_opt_file_path $__strategy
		#check if file exists
		if [ -f "$__opt_file_path" ]
		then
			echo "[exec] loaded optimized file $__opt_file_path"
			#copy file to strategies folder
			cp "$__opt_file_path" "$__volume/strategies/$__strategy.json"
		fi
		echo "[exec] $__cmd $args"
		$__cmd  $args
	fi

}

__save()
{
	__parse_args $@

	#check values
	[ -z "$__timeframe" ] && echo "[save process] missing timeframe (4h or 12h)" && exit;
	[ -z "$__timerange" ] && echo "[save process] missing timerange" && exit;
	[ -z "$__suffix" ] && echo "[save process] missing --suffix" && exit;


	local strategy=$__strategy
	local timeframe=$__timeframe
	local timerange=$__timerange
	local suffix=$__suffix

	__compute_opt_file_path $strategy
	local cmd="cp "$__volume/strategies/$strategy.json" "$__volume/versions/$__opt_file_path";echo '[save process] saved optimized file $__opt_file_path'"

	__exec $cmd $__extra_args
}

__parse_args()
{
	__cmd_prefix=;
	__version="0.0";
	__timerange=;
	__timerange_name=;
	__timeframe=;
	__suffix=;
	__epochs=;
	__loss=;
	__timeframe_detail='5m';
	__strategy=;
	__config="$__volume/configs/bt/top10.json";
	__extra_args=;
	while [[ $# -gt 0 ]]; do
		case $1 in
			--echo)
				__cmd_prefix=echo;
				shift
			;;
			--version)
				__version=$2;
				shift 2;
			;;
			--suffix)
				__suffix=$2;
				shift 2;
			;;
			--strategy)
				__strategy=$2
				shift 2;		
			;;
			--epochs)
				__epochs=$2
				shift 2;
			;;
			--hyperopt-loss)
				__loss=$2
				shift 2;
			;;
			--4h)
				__timeframe='4h';
				shift;
			;;
			--12h)
				__timeframe='12h';
				shift;
			;;
			--uptrend)
				__timerange="$uptrend"
				__timerange_name="uptrend"
				shift
			;;
			--downtrend)
				__timerange="$downtrend"
				__timerange_name="downtrend"
				shift
			;;
			--alltime)
				__timerange="$all_time"
				__timerange_name="alltime"
				shift
			;;
			--mm2021)
				__timerange="$mm2021"
				__timerange_name="mm2021"
				shift
			;;
			--mm2020)
				__timerange="$mm2020"
				__timerange_name="mm2020"
				shift
			;;
			--basic)
				__config="$__volume/configs/bt/basic.json"
				shift
			;;
			--top10)
				__config="$__volume/configs/bt/top10.json"
				shift
			;;
			--correlation)
				__config="$__volume/configs/bt/correlation.json"
				shift
			;;
			*)
				__extra_args="$__extra_args $1";
				shift
			;;
		esac;
	done;
}

#run
__exec $@
